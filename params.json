{"name":"Seccoco","tagline":"easy encryption","body":"# What is Seccoco?\r\n\r\nSeccoco is an Android library which offers you to add encryption to your application with just a few lines of code. Seccoco is designed with simplicity in mind. Instead of giving you gazillions of different configurations it provides you sensible defaults and abstracts away the complexity of cryptography. Under the hood it uses state of the art crypto algorithms.\r\n\r\n# How to use Seccoco?\r\n\r\n## Initialize\r\n Create Seccoco directly in your Android Application class and make this object available to other parts of your application e.g. via dependency injection.\r\n\r\n    Seccoco seccoco =  SeccocoFactory.create(this);\r\n\r\nInternally Seccoco will at first launch of the application create a keypair and store the private key securily. It then creates a random passphrase and stores this encrypted with the public key. On subsequent starts of the application it will then access the private key and decrypt the passphrase.\r\n\r\n## Symmetric crypto\r\n\r\nYou don't need to provide a passphrase or IV. Seccoco internally uses the auto generated passphrase with an IV for it.\r\n\r\n    byte[] encrypted = seccoco.crypto().encrypt(\"Hello from Seccoco\".getBytes());\r\n    byte[] decrypted = seccoco.crypto().decrypt(encrypted);\r\n\r\n##Hybrid crypto\r\n\r\n###Encryption\r\n\r\n####For yourself\r\n\r\nYou can encrypt the data so that it can only be decrypted from your specific Seccoco configuration:\r\n\r\n\r\n    byte[] plainText =  \"My very own secret data\".getBytes();\r\n    EncryptedMessage encryptedMessage = seccoco.crypto().encryptForSelf(plainText);\r\n\r\n\r\n####For the trusted recipient\r\n\r\nYou can include one certificate which is then trusted by default. \r\nIn order to do this, you need to put this certificate in PEM format in the asset folder and name it ```seccoco-trustedrecipient.pem```.\r\n\r\nIf this file is found, you can encrypt the data for this recipient:\r\n\r\n    byte[] plainText = \"Hi there, I trust you out of the box!\".getBytes();\r\n    EncryptedMessage encryptedMessage = seccoco.crypto().encryptForTrustedRecipient(plainText);\r\n    \r\n####For some other recipient\r\n\r\nIf you want to send an encrypted message to somebody else, all you need to have is the certificate in PEM format.\r\n\r\nFirst you need to extract the ```Identity``` object from the PEM file. This object holds the certificate as well as the fingerprint of the certificate.\r\n\r\n    Identity identity = seccoco.identities().extractFromPem(new FileReader(new File(\"recipient.pem\")));\r\n\r\nThen you can encrypt the data:\r\n\r\n    byte[] plainText = \"Hi there, thanks for sending me your certificate!\".getBytes();\r\n    EncryptedMessage encryptedMessage = seccoco.crypto().encrypt(plainText,identity);\r\n\r\n\r\nIn all cases the encrypted message will have your certificate attached and also a signature of the content, so that the recipient of this message can validate if you are the one who sent this message.\r\n\r\n\r\n###Decryption\r\n\r\nIf you received an encrypted message you can decrypt it again without the need of additional parameters.\r\n    \r\n    byte[] decrypted = seccoco.crypto().decrypt(encryptedMessage);\r\n\r\nContact us for questions: [info@seccoco.com](mailto:info@seccoco.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}